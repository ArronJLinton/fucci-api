// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: media.sql

package database

import (
	"context"
)

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (match_id, media_url)
VALUES ($1, $2)
RETURNING id, match_id, media_url, created_at, updated_at
`

type CreateMediaParams struct {
	MatchID  string
	MediaUrl string
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.db.QueryRowContext(ctx, createMedia, arg.MatchID, arg.MediaUrl)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.MediaUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMediaById = `-- name: DeleteMediaById :exec
DELETE FROM media WHERE id = $1
`

func (q *Queries) DeleteMediaById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMediaById, id)
	return err
}

const getMediaByMatchId = `-- name: GetMediaByMatchId :many
SELECT id, match_id, media_url, created_at, updated_at FROM media WHERE match_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetMediaByMatchId(ctx context.Context, matchID string) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, getMediaByMatchId, matchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.MediaUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
