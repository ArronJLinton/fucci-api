// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leagues.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createLeague = `-- name: CreateLeague :one
INSERT INTO leagues (name, description, owner_id, country, level, logo_url, website, founded)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, description, owner_id, country, level, logo_url, website, founded, created_at, updated_at
`

type CreateLeagueParams struct {
	Name        string
	Description sql.NullString
	OwnerID     int32
	Country     sql.NullString
	Level       sql.NullInt32
	LogoUrl     sql.NullString
	Website     sql.NullString
	Founded     sql.NullInt32
}

func (q *Queries) CreateLeague(ctx context.Context, arg CreateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, createLeague,
		arg.Name,
		arg.Description,
		arg.OwnerID,
		arg.Country,
		arg.Level,
		arg.LogoUrl,
		arg.Website,
		arg.Founded,
	)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.Country,
		&i.Level,
		&i.LogoUrl,
		&i.Website,
		&i.Founded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLeague = `-- name: DeleteLeague :exec
DELETE FROM leagues WHERE id = $1
`

func (q *Queries) DeleteLeague(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLeague, id)
	return err
}

const getLeague = `-- name: GetLeague :one
SELECT id, name, description, owner_id, country, level, logo_url, website, founded, created_at, updated_at FROM leagues WHERE id = $1
`

func (q *Queries) GetLeague(ctx context.Context, id uuid.UUID) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeague, id)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.Country,
		&i.Level,
		&i.LogoUrl,
		&i.Website,
		&i.Founded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLeagues = `-- name: ListLeagues :many
SELECT id, name, description, owner_id, country, level, logo_url, website, founded, created_at, updated_at FROM leagues 
WHERE ($1::int IS NULL OR owner_id = $1)
  AND ($2::text IS NULL OR country = $2)
  AND ($3::int IS NULL OR level = $3)
ORDER BY name
LIMIT $4 OFFSET $5
`

type ListLeaguesParams struct {
	Column1 int32
	Column2 string
	Column3 int32
	Limit   int32
	Offset  int32
}

func (q *Queries) ListLeagues(ctx context.Context, arg ListLeaguesParams) ([]League, error) {
	rows, err := q.db.QueryContext(ctx, listLeagues,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []League
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.Country,
			&i.Level,
			&i.LogoUrl,
			&i.Website,
			&i.Founded,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLeague = `-- name: UpdateLeague :one
UPDATE leagues 
SET name = $2, description = $3, country = $4, level = $5, 
    logo_url = $6, website = $7, founded = $8, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, owner_id, country, level, logo_url, website, founded, created_at, updated_at
`

type UpdateLeagueParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Country     sql.NullString
	Level       sql.NullInt32
	LogoUrl     sql.NullString
	Website     sql.NullString
	Founded     sql.NullInt32
}

func (q *Queries) UpdateLeague(ctx context.Context, arg UpdateLeagueParams) (League, error) {
	row := q.db.QueryRowContext(ctx, updateLeague,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Country,
		arg.Level,
		arg.LogoUrl,
		arg.Website,
		arg.Founded,
	)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.Country,
		&i.Level,
		&i.LogoUrl,
		&i.Website,
		&i.Founded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
