// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: team_managers.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTeamManager = `-- name: CreateTeamManager :one
INSERT INTO team_managers (user_id, league_id, team_id, title, experience, bio)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, league_id, team_id, title, experience, bio, created_at, updated_at
`

type CreateTeamManagerParams struct {
	UserID     int32
	LeagueID   uuid.UUID
	TeamID     uuid.NullUUID
	Title      sql.NullString
	Experience sql.NullInt32
	Bio        sql.NullString
}

func (q *Queries) CreateTeamManager(ctx context.Context, arg CreateTeamManagerParams) (TeamManager, error) {
	row := q.db.QueryRowContext(ctx, createTeamManager,
		arg.UserID,
		arg.LeagueID,
		arg.TeamID,
		arg.Title,
		arg.Experience,
		arg.Bio,
	)
	var i TeamManager
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LeagueID,
		&i.TeamID,
		&i.Title,
		&i.Experience,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTeamManager = `-- name: DeleteTeamManager :exec
DELETE FROM team_managers WHERE id = $1
`

func (q *Queries) DeleteTeamManager(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTeamManager, id)
	return err
}

const getTeamManager = `-- name: GetTeamManager :one
SELECT id, user_id, league_id, team_id, title, experience, bio, created_at, updated_at FROM team_managers WHERE id = $1
`

func (q *Queries) GetTeamManager(ctx context.Context, id uuid.UUID) (TeamManager, error) {
	row := q.db.QueryRowContext(ctx, getTeamManager, id)
	var i TeamManager
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LeagueID,
		&i.TeamID,
		&i.Title,
		&i.Experience,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamManagersByLeague = `-- name: GetTeamManagersByLeague :many
SELECT id, user_id, league_id, team_id, title, experience, bio, created_at, updated_at FROM team_managers WHERE league_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetTeamManagersByLeague(ctx context.Context, leagueID uuid.UUID) ([]TeamManager, error) {
	rows, err := q.db.QueryContext(ctx, getTeamManagersByLeague, leagueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamManager
	for rows.Next() {
		var i TeamManager
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LeagueID,
			&i.TeamID,
			&i.Title,
			&i.Experience,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamManagers = `-- name: ListTeamManagers :many
SELECT id, user_id, league_id, team_id, title, experience, bio, created_at, updated_at FROM team_managers 
WHERE ($1::uuid IS NULL OR league_id = $1)
  AND ($2::uuid IS NULL OR team_id = $2)
  AND ($3::uuid IS NULL OR user_id = $3)
ORDER BY created_at DESC
LIMIT $4 OFFSET $5
`

type ListTeamManagersParams struct {
	Column1 uuid.UUID
	Column2 uuid.UUID
	Column3 uuid.UUID
	Limit   int32
	Offset  int32
}

func (q *Queries) ListTeamManagers(ctx context.Context, arg ListTeamManagersParams) ([]TeamManager, error) {
	rows, err := q.db.QueryContext(ctx, listTeamManagers,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamManager
	for rows.Next() {
		var i TeamManager
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LeagueID,
			&i.TeamID,
			&i.Title,
			&i.Experience,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamsByManager = `-- name: ListTeamsByManager :many
SELECT t.id, t.name, t.league_id, t.state, t.country, t.created_at, t.updated_at, t.description, t.manager_id, t.logo_url, t.city, t.founded, t.stadium, t.capacity FROM teams t
JOIN team_managers tm ON t.id = tm.team_id
WHERE tm.user_id = $1
`

func (q *Queries) ListTeamsByManager(ctx context.Context, userID int32) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeamsByManager, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LeagueID,
			&i.State,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.ManagerID,
			&i.LogoUrl,
			&i.City,
			&i.Founded,
			&i.Stadium,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeamManager = `-- name: UpdateTeamManager :one
UPDATE team_managers 
SET team_id = $2, title = $3, experience = $4, bio = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, league_id, team_id, title, experience, bio, created_at, updated_at
`

type UpdateTeamManagerParams struct {
	ID         uuid.UUID
	TeamID     uuid.NullUUID
	Title      sql.NullString
	Experience sql.NullInt32
	Bio        sql.NullString
}

func (q *Queries) UpdateTeamManager(ctx context.Context, arg UpdateTeamManagerParams) (TeamManager, error) {
	row := q.db.QueryRowContext(ctx, updateTeamManager,
		arg.ID,
		arg.TeamID,
		arg.Title,
		arg.Experience,
		arg.Bio,
	)
	var i TeamManager
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LeagueID,
		&i.TeamID,
		&i.Title,
		&i.Experience,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
