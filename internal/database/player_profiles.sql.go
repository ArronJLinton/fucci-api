// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player_profiles.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPlayerProfile = `-- name: CreatePlayerProfile :one
INSERT INTO player_profiles (
  user_id, team_id, position, age, country, height_cm,
  pace, shooting, passing, stamina, dribbling, defending, physical
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, user_id, team_id, position, age, country, height_cm, pace, shooting, passing, stamina, dribbling, defending, physical, is_verified, created_at, updated_at
`

type CreatePlayerProfileParams struct {
	UserID    int32
	TeamID    uuid.NullUUID
	Position  string
	Age       int32
	Country   string
	HeightCm  int32
	Pace      int32
	Shooting  int32
	Passing   int32
	Stamina   int32
	Dribbling int32
	Defending int32
	Physical  int32
}

func (q *Queries) CreatePlayerProfile(ctx context.Context, arg CreatePlayerProfileParams) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, createPlayerProfile,
		arg.UserID,
		arg.TeamID,
		arg.Position,
		arg.Age,
		arg.Country,
		arg.HeightCm,
		arg.Pace,
		arg.Shooting,
		arg.Passing,
		arg.Stamina,
		arg.Dribbling,
		arg.Defending,
		arg.Physical,
	)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TeamID,
		&i.Position,
		&i.Age,
		&i.Country,
		&i.HeightCm,
		&i.Pace,
		&i.Shooting,
		&i.Passing,
		&i.Stamina,
		&i.Dribbling,
		&i.Defending,
		&i.Physical,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlayerProfile = `-- name: DeletePlayerProfile :exec
DELETE FROM player_profiles WHERE id = $1
`

func (q *Queries) DeletePlayerProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlayerProfile, id)
	return err
}

const getPlayerProfile = `-- name: GetPlayerProfile :one
SELECT id, user_id, team_id, position, age, country, height_cm, pace, shooting, passing, stamina, dribbling, defending, physical, is_verified, created_at, updated_at FROM player_profiles WHERE id = $1
`

func (q *Queries) GetPlayerProfile(ctx context.Context, id uuid.UUID) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, getPlayerProfile, id)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TeamID,
		&i.Position,
		&i.Age,
		&i.Country,
		&i.HeightCm,
		&i.Pace,
		&i.Shooting,
		&i.Passing,
		&i.Stamina,
		&i.Dribbling,
		&i.Defending,
		&i.Physical,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayerProfileByUser = `-- name: GetPlayerProfileByUser :one
SELECT id, user_id, team_id, position, age, country, height_cm, pace, shooting, passing, stamina, dribbling, defending, physical, is_verified, created_at, updated_at FROM player_profiles WHERE user_id = $1
`

func (q *Queries) GetPlayerProfileByUser(ctx context.Context, userID int32) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, getPlayerProfileByUser, userID)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TeamID,
		&i.Position,
		&i.Age,
		&i.Country,
		&i.HeightCm,
		&i.Pace,
		&i.Shooting,
		&i.Passing,
		&i.Stamina,
		&i.Dribbling,
		&i.Defending,
		&i.Physical,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayersByLeague = `-- name: GetPlayersByLeague :many
SELECT pp.id, pp.user_id, pp.team_id, pp.position, pp.age, pp.country, pp.height_cm, pp.pace, pp.shooting, pp.passing, pp.stamina, pp.dribbling, pp.defending, pp.physical, pp.is_verified, pp.created_at, pp.updated_at, u.firstname, u.lastname 
FROM player_profiles pp
JOIN users u ON pp.user_id = u.id
JOIN teams t ON pp.team_id = t.id
WHERE t.league_id = $1 
ORDER BY t.name, pp.position, u.lastname
`

type GetPlayersByLeagueRow struct {
	ID         uuid.UUID
	UserID     int32
	TeamID     uuid.NullUUID
	Position   string
	Age        int32
	Country    string
	HeightCm   int32
	Pace       int32
	Shooting   int32
	Passing    int32
	Stamina    int32
	Dribbling  int32
	Defending  int32
	Physical   int32
	IsVerified bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Firstname  string
	Lastname   string
}

func (q *Queries) GetPlayersByLeague(ctx context.Context, leagueID uuid.NullUUID) ([]GetPlayersByLeagueRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersByLeague, leagueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlayersByLeagueRow
	for rows.Next() {
		var i GetPlayersByLeagueRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TeamID,
			&i.Position,
			&i.Age,
			&i.Country,
			&i.HeightCm,
			&i.Pace,
			&i.Shooting,
			&i.Passing,
			&i.Stamina,
			&i.Dribbling,
			&i.Defending,
			&i.Physical,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Firstname,
			&i.Lastname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayersByTeam = `-- name: GetPlayersByTeam :many
SELECT pp.id, pp.user_id, pp.team_id, pp.position, pp.age, pp.country, pp.height_cm, pp.pace, pp.shooting, pp.passing, pp.stamina, pp.dribbling, pp.defending, pp.physical, pp.is_verified, pp.created_at, pp.updated_at, u.firstname, u.lastname 
FROM player_profiles pp
JOIN users u ON pp.user_id = u.id
WHERE pp.team_id = $1 
ORDER BY pp.position, u.lastname
`

type GetPlayersByTeamRow struct {
	ID         uuid.UUID
	UserID     int32
	TeamID     uuid.NullUUID
	Position   string
	Age        int32
	Country    string
	HeightCm   int32
	Pace       int32
	Shooting   int32
	Passing    int32
	Stamina    int32
	Dribbling  int32
	Defending  int32
	Physical   int32
	IsVerified bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Firstname  string
	Lastname   string
}

func (q *Queries) GetPlayersByTeam(ctx context.Context, teamID uuid.NullUUID) ([]GetPlayersByTeamRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersByTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlayersByTeamRow
	for rows.Next() {
		var i GetPlayersByTeamRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TeamID,
			&i.Position,
			&i.Age,
			&i.Country,
			&i.HeightCm,
			&i.Pace,
			&i.Shooting,
			&i.Passing,
			&i.Stamina,
			&i.Dribbling,
			&i.Defending,
			&i.Physical,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Firstname,
			&i.Lastname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFreeAgents = `-- name: ListFreeAgents :many
SELECT pp.id, pp.user_id, pp.team_id, pp.position, pp.age, pp.country, pp.height_cm, pp.pace, pp.shooting, pp.passing, pp.stamina, pp.dribbling, pp.defending, pp.physical, pp.is_verified, pp.created_at, pp.updated_at, u.firstname, u.lastname, u.email 
FROM player_profiles pp
JOIN users u ON pp.user_id = u.id
WHERE pp.team_id IS NULL
ORDER BY pp.created_at DESC
`

type ListFreeAgentsRow struct {
	ID         uuid.UUID
	UserID     int32
	TeamID     uuid.NullUUID
	Position   string
	Age        int32
	Country    string
	HeightCm   int32
	Pace       int32
	Shooting   int32
	Passing    int32
	Stamina    int32
	Dribbling  int32
	Defending  int32
	Physical   int32
	IsVerified bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Firstname  string
	Lastname   string
	Email      string
}

func (q *Queries) ListFreeAgents(ctx context.Context) ([]ListFreeAgentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFreeAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFreeAgentsRow
	for rows.Next() {
		var i ListFreeAgentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TeamID,
			&i.Position,
			&i.Age,
			&i.Country,
			&i.HeightCm,
			&i.Pace,
			&i.Shooting,
			&i.Passing,
			&i.Stamina,
			&i.Dribbling,
			&i.Defending,
			&i.Physical,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayerProfiles = `-- name: ListPlayerProfiles :many
SELECT id, user_id, team_id, position, age, country, height_cm, pace, shooting, passing, stamina, dribbling, defending, physical, is_verified, created_at, updated_at FROM player_profiles ORDER BY created_at DESC
`

func (q *Queries) ListPlayerProfiles(ctx context.Context) ([]PlayerProfile, error) {
	rows, err := q.db.QueryContext(ctx, listPlayerProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayerProfile
	for rows.Next() {
		var i PlayerProfile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TeamID,
			&i.Position,
			&i.Age,
			&i.Country,
			&i.HeightCm,
			&i.Pace,
			&i.Shooting,
			&i.Passing,
			&i.Stamina,
			&i.Dribbling,
			&i.Defending,
			&i.Physical,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayerProfilesByTeam = `-- name: ListPlayerProfilesByTeam :many
SELECT pp.id, pp.user_id, pp.team_id, pp.position, pp.age, pp.country, pp.height_cm, pp.pace, pp.shooting, pp.passing, pp.stamina, pp.dribbling, pp.defending, pp.physical, pp.is_verified, pp.created_at, pp.updated_at, u.firstname, u.lastname 
FROM player_profiles pp
JOIN users u ON pp.user_id = u.id
WHERE pp.team_id = $1 
ORDER BY pp.position, u.lastname
`

type ListPlayerProfilesByTeamRow struct {
	ID         uuid.UUID
	UserID     int32
	TeamID     uuid.NullUUID
	Position   string
	Age        int32
	Country    string
	HeightCm   int32
	Pace       int32
	Shooting   int32
	Passing    int32
	Stamina    int32
	Dribbling  int32
	Defending  int32
	Physical   int32
	IsVerified bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Firstname  string
	Lastname   string
}

func (q *Queries) ListPlayerProfilesByTeam(ctx context.Context, teamID uuid.NullUUID) ([]ListPlayerProfilesByTeamRow, error) {
	rows, err := q.db.QueryContext(ctx, listPlayerProfilesByTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerProfilesByTeamRow
	for rows.Next() {
		var i ListPlayerProfilesByTeamRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TeamID,
			&i.Position,
			&i.Age,
			&i.Country,
			&i.HeightCm,
			&i.Pace,
			&i.Shooting,
			&i.Passing,
			&i.Stamina,
			&i.Dribbling,
			&i.Defending,
			&i.Physical,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Firstname,
			&i.Lastname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerProfile = `-- name: UpdatePlayerProfile :one
UPDATE player_profiles 
SET 
  team_id = $2, position = $3, age = $4, country = $5, height_cm = $6,
  pace = $7, shooting = $8, passing = $9, stamina = $10, dribbling = $11, 
  defending = $12, physical = $13, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, team_id, position, age, country, height_cm, pace, shooting, passing, stamina, dribbling, defending, physical, is_verified, created_at, updated_at
`

type UpdatePlayerProfileParams struct {
	ID        uuid.UUID
	TeamID    uuid.NullUUID
	Position  string
	Age       int32
	Country   string
	HeightCm  int32
	Pace      int32
	Shooting  int32
	Passing   int32
	Stamina   int32
	Dribbling int32
	Defending int32
	Physical  int32
}

func (q *Queries) UpdatePlayerProfile(ctx context.Context, arg UpdatePlayerProfileParams) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerProfile,
		arg.ID,
		arg.TeamID,
		arg.Position,
		arg.Age,
		arg.Country,
		arg.HeightCm,
		arg.Pace,
		arg.Shooting,
		arg.Passing,
		arg.Stamina,
		arg.Dribbling,
		arg.Defending,
		arg.Physical,
	)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TeamID,
		&i.Position,
		&i.Age,
		&i.Country,
		&i.HeightCm,
		&i.Pace,
		&i.Shooting,
		&i.Passing,
		&i.Stamina,
		&i.Dribbling,
		&i.Defending,
		&i.Physical,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlayerTeam = `-- name: UpdatePlayerTeam :one
UPDATE player_profiles 
SET team_id = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, team_id, position, age, country, height_cm, pace, shooting, passing, stamina, dribbling, defending, physical, is_verified, created_at, updated_at
`

type UpdatePlayerTeamParams struct {
	ID     uuid.UUID
	TeamID uuid.NullUUID
}

func (q *Queries) UpdatePlayerTeam(ctx context.Context, arg UpdatePlayerTeamParams) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerTeam, arg.ID, arg.TeamID)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TeamID,
		&i.Position,
		&i.Age,
		&i.Country,
		&i.HeightCm,
		&i.Pace,
		&i.Shooting,
		&i.Passing,
		&i.Stamina,
		&i.Dribbling,
		&i.Defending,
		&i.Physical,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
