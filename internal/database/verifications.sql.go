// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: verifications.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const countVerificationsByPlayer = `-- name: CountVerificationsByPlayer :one
SELECT COUNT(*) FROM verifications WHERE player_profile_id = $1
`

func (q *Queries) CountVerificationsByPlayer(ctx context.Context, playerProfileID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countVerificationsByPlayer, playerProfileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVerification = `-- name: CreateVerification :one
INSERT INTO verifications (player_profile_id, verifier_user_id)
VALUES ($1, $2)
RETURNING id, player_profile_id, verifier_user_id, created_at
`

type CreateVerificationParams struct {
	PlayerProfileID uuid.UUID
	VerifierUserID  int32
}

func (q *Queries) CreateVerification(ctx context.Context, arg CreateVerificationParams) (Verification, error) {
	row := q.db.QueryRowContext(ctx, createVerification, arg.PlayerProfileID, arg.VerifierUserID)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.PlayerProfileID,
		&i.VerifierUserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVerification = `-- name: DeleteVerification :exec
DELETE FROM verifications WHERE id = $1
`

func (q *Queries) DeleteVerification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVerification, id)
	return err
}

const getVerification = `-- name: GetVerification :one
SELECT id, player_profile_id, verifier_user_id, created_at FROM verifications WHERE id = $1
`

func (q *Queries) GetVerification(ctx context.Context, id uuid.UUID) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getVerification, id)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.PlayerProfileID,
		&i.VerifierUserID,
		&i.CreatedAt,
	)
	return i, err
}

const listVerificationsByPlayer = `-- name: ListVerificationsByPlayer :many
SELECT id, player_profile_id, verifier_user_id, created_at FROM verifications WHERE player_profile_id = $1
`

func (q *Queries) ListVerificationsByPlayer(ctx context.Context, playerProfileID uuid.UUID) ([]Verification, error) {
	rows, err := q.db.QueryContext(ctx, listVerificationsByPlayer, playerProfileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Verification
	for rows.Next() {
		var i Verification
		if err := rows.Scan(
			&i.ID,
			&i.PlayerProfileID,
			&i.VerifierUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerVerificationStatus = `-- name: UpdatePlayerVerificationStatus :exec
UPDATE player_profiles 
SET is_verified = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdatePlayerVerificationStatusParams struct {
	ID         uuid.UUID
	IsVerified bool
}

func (q *Queries) UpdatePlayerVerificationStatus(ctx context.Context, arg UpdatePlayerVerificationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePlayerVerificationStatus, arg.ID, arg.IsVerified)
	return err
}
